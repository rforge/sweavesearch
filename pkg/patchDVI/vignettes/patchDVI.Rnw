\documentclass[12pt]{article}
\usepackage{Sweave}
\usepackage{natbib}
\usepackage{hyperref}
\usepackage[utf8]{inputenc}

\bibliographystyle{plain}

\SweaveOpts{concordance=TRUE}

\newcommand{\patchDVI}{\patchDVIn\ }
\newcommand{\patchDVIn}{\textbf{patchDVI}}
\newcommand{\file}[1]{\texttt{#1}}

%\VignetteIndexEntry{The patchDVI package}
%\VignetteKeyword{Sweave}
%\VignetteKeyword{pdf}

\title{The \patchDVI package}
\author{Duncan Murdoch}

\begin{document}

\maketitle

\abstract{
The \patchDVI package works with Sweave \citep{Leisch02}  and
document previewers to facilitate editing:  it modifies the links
that \LaTeX\ puts into the output so that they refer to the original
source.  It also includes a few project management functions to 
make large multi-file Sweave documents easier to handle.}

\newpage

\tableofcontents

\newpage

\section{Introduction}

Most implementations of \LaTeX\ allow source references to be emitted, so
that previewers of the \file{.dvi} or \file{.pdf} output file can
link back to the original source line.  This has been a feature of the
\texttt{yap} previewer for \file{.dvi} files in MikTeX \citep{Schenk10}
for many
years.  Support for source references has appeared more recently
for \file{.pdf}
output, first in \file{pdfsync}.  Most recently
Synctex \citep{Laurens08} links have been
implemented in \texttt{pdflatex} and other \LaTeX\ processors.

Unfortunately for Sweave users, these links point to the \file{.tex}
source that was processed, which is not the true source code in the
Sweave \file{.Rnw} or \file{.Snw} or other input file.  (I will
refer to all of these as \file{.Rnw} files.)
Clicking on ``go to source''
in a previewer will jump to the \file{.tex} file; changes made there
will be lost the next time the Sweave input is processed.

I wrote the \patchDVI package to address this problem.  It works as
follows.  If the Sweave file is processed with the option
\texttt{concordance=TRUE}, Sweave will output a record of the
concordance between the lines in the input file and the output file.
When the file is processed by \LaTeX, this information is embedded in
the output.  (Details of the embedding are described in sections \ref{sec:concordance}
to \ref{sec:synctex} below.)  After
producing the \file{.dvi} or \file{.pdf} file, a \patchDVI
function is run to read the concordance information and to patch the
source reference information produced by \LaTeX.  Once this has been
done, previewers will see references to the original Sweave source
rather than the \LaTeX\ intermediate file.

Besides the technical details mentioned above, 
this paper describes the history of \patchDVI in the next section and
in section \ref{sec:make} some
project management functions.  It concludes with a short discussion.

\section{Quick Start Instructions}\label{sec:quickstart}

There are several ways to make use of \patchDVIn.  This section describes some common ones.

In all cases the package needs to be installed first; the current release
is on CRAN and can be installed using
<<eval=FALSE>>=
install.packages("patchDVI")
@
Source code is maintained on R-forge, and the latest development version
can be installed using
<<eval=FALSE>>=
install.packages("patchDVI", repos="http://R-forge.r-project.org")
@

The document also needs to have an option set to produce the ``concordances'' (links between the 
\file{.Rnw} source and the \file{.tex} output of Sweave).  Include these lines near the start of
your document: \\
\verb!\usepackage{Sweave}!\\
\verb!\SweaveOpts{concordance=TRUE}!\\

The simplest way to proceed is from within R.  Assuming \file{doc.Rnw}
is the Sweave document to process and it is in the current working directory, run
<<eval=FALSE>>=
library(patchDVI)
SweavePDF("doc.Rnw")
@
This runs  \file{doc.Rnw} through Sweave, runs any other chapters in the
project through Sweave, then runs the main \file{.tex} file (typically
\file{doc.tex}, but not necessarily; see section \ref{sec:make} below)
through \texttt{pdflatex}, and patches the source links.  To produce DVI
output
instead of PDF substitute \texttt{SweaveDVI} for
\texttt{SweavePDF}, and to use \texttt{latex} and \texttt{dvipdfm}
to produce \file{PDF} output, use \texttt{SweaveDVIPDFM}.
If you are using MikTeX on Windows, the
functions are \texttt{SweavePDFMiktex} and
\texttt{SweaveMiktex} correspond to the first two of these respectively,
and use a few MikTeX-specific features.

These functions all have an optional argument \texttt{preview}, which
can contain a command line to run a \file{.pdf} or \file{.dvi} previewer
(with the filename replaced by \verb!%s!).  The \file{.pdf} previewer
should be one that can handle Synctex links; unfortunately, Acrobat
Reader and MacOS Preview are both deficient in this area. On
Windows, \texttt{SumatraPDF} works, as do the built-in previewers
in TeXShop and TeXWorks on MacOS X and other platforms.

MikTeX includes the \texttt{yap}
previewer for \file{.dvi} files; the \texttt{SweaveMiktex} command sets it
as the default.

Another way to proceed is directly from within your text editor.  The
instructions here depend on your editor; I have included a few in the
Appendices: TeXShop in Appendix \ref{sec:texshop}, WinEdt in
Appendix \ref{sec:winedt}, and TeXWorks in Appendix
\ref{sec:texworks}. Some editors (e.g. TeXShop and TeXWorks)
include a previewer that can handle the source links.

Finally, you may want to run Sweave from the command line, outside of R.  This line (or the obvious variants
with replacements for \texttt{SweavePDF}) should do it:
\begin{verbatim}
Rscript -e 'patchDVI::SweavePDF("doc.Rnw")'
\end{verbatim}




\section{\patchDVI History}\label{sec:history}

Initially  \patchDVI only worked for \file{.dvi} files (hence the name).
It required changes to the Sweave function in R, which 
first appeared around the release of R version
2.5.0. with incompatible changes in R version 2.8.0 when \file{.pdf}
support was added to \patchDVIn.

Using \patchDVI requires a pre-processing step (Sweave), \LaTeX\ 
processing, and a post-processing step (patching).  This is usually
followed by a preview of the resulting output file.  It quickly became
apparent that it was convenient to package these steps into a
single R function, so the user only needed to make a single call.  But
the details of \LaTeX\  processing vary from platform to platform, so I
wrote functions \texttt{SweaveMiktex} and \texttt{SweavePDFMiktex}
specific to the MikTex platform, with the intention of adding
others as I used them or users told me what needed adding.  This never happened,
but in the meantime, Brian Ripley made the \texttt{tools::texi2dvi} function
in R much more flexible, and in version 1.7 of
\patchDVI I included a modified version of it with the hope that
\patchDVI should be more nearly platform neutral.

The 1.7 release was motivated by an attempt to support TeXWorks \citep{Kew10}, a
cross-platform \LaTeX\ targetted editor.  TeXWorks was still in its early
days (I was working with version 0.2 on Windows), and it did not have
enough flexibility to handle large Sweave projects, where for example, each
chapter of a book requires separate Sweave processing, but \LaTeX\ processes
only a main wrapper file.  This prompted me to include more \texttt{make}-style
capabilities into \patchDVIn.  It is now possible to specify a list of
Sweave input files to process (optionally only if they have changed since the
last processing) and the main wrapper file, all within Sweave chunks
in a single file, using the \texttt{SweaveAll} function.

The \texttt{SweaveDVIPDFM} function is the most recent addition.
For English language processing, I find \texttt{pdflatex} to be the most
convenient processor, but it does not work well in languages like 
Japanese.  During a visit to the Institute of Statistical Mathematics
in Tokyo I learned of the issues, and with the help of Prof. H. Okumura
and Junji Nakano I worked out \texttt{SweaveDVIPDFM} to handle the two
step conversion to PDF.

\section{Sweave Concordances}\label{sec:concordance}

Sweave processes the code chunks in the \file{.Rnw} file, replacing each
with the requested output from the command.  This means that the output \file{.tex}
file alternates between copied \LaTeX\ source and newly produced blocks of 
output.  Each line in the \file{.tex} file can thus be mapped to 
one or more lines of input, and that is what the concordance does.

The concordance records are text records in the following format.  There are
four parts, separated by colons:
\begin{enumerate}
\item The label \texttt{concordance} to indicate the type of record.
\item The output \file{.tex} filename.
\item The input \file{.Rnw} filename.
\item The input line numbers corresponding to each output line.
\end{enumerate}
The third component is compressed using a simple encoding:  The first
number is the first line number; the remainder of line numbers are a
run-length encoding of the differences.  Thus if the input file is as
shown in Table \ref{tab:input}, 
\begin{table}
\caption{Input file for simple example.\label{tab:input}}
\begin{center}
\begin{tabular}{ll}
\hline
Line number & Input text \\
\hline
1 & \verb!\SweaveOpts{concordance=TRUE}!  \\
2 & This is text  \\
3 & \verb!<<>>=!  \\ 
4 & \verb!123! \\
5 &  \verb!@! \\
6 & This is more text  \\
\hline
\end{tabular}
\end{center}
\end{table}
the output file would be as
shown in Table \ref{tab:output}, with the concordance as shown there in the second column.
\begin{table}
\caption{Output file for simple example.\label{tab:output}}
\begin{center}
\begin{tabular}{lll}
\hline
Output line & Input line &  Output text \\
\hline
1 & 1 & \verb!\input{sample-concordance}! \\
2 & 2 & This is text. \\
3 & 4 & \verb!\begin{Schunk}! \\
4 & 4 & \verb!\begin{Sinput}! \\
5 & 4 & \verb!> 123! \\
6 & 4 & \verb!\end{Sinput}! \\
7 & 4 & \verb!\begin{Soutput}! \\
8 & 4 & \verb![1] 123! \\
9 & 4 & \verb!\end{Soutput}! \\
10 & 4 & \verb!\end{Schunk}! \\
11 & 6 & This is more text \\
\hline
\end{tabular}
\end{center}
\end{table}
This concordance would be recorded in the file \file{sample-concordance.tex}
as
\begin{verbatim}
\Sconcordance{concordance:sample.tex:sample.Rnw:%
1 1 1 1 2 7 0 1 2}
\end{verbatim}
The numeric part of this file may be interpreted as shown in Table \ref{tab:concordance}.
\begin{table}
\caption{Encoding of numeric part of concordance record.\label{tab:concordance}}
\begin{center}
\begin{tabular}{lll}
\hline
Values & Interpretation & Expansion \\
\hline
\texttt{1} & line 1  & 1 \\
\texttt{1 1} & 1 increase of 1 & 2 \\
\texttt{1 2} & 1 increase of 2 & 4 \\
\texttt{7 0} & 7 increases of 0 & 4 4 4 4 4 4 4 \\
\texttt{1 2} & 1 increase of 2 & 6 \\
\hline
\end{tabular}
\end{center}
\end{table}

\section{Patching \file{.dvi} Files}\label{sec:dvi}

The \verb!\Sconcordance! macro expands to a \verb!\special! macro when
producing a \file{.dvi} file.  This is included verbatim in the \file{.dvi}
file. The ``concordance:'' prefix identifies it as a \patchDVI concordance.
The \texttt{patchDVI} function scans the whole file until it finds
this sort of record.  (There may be more than one, if multiple files make up
the document.)  Source references are also recorded by \LaTeX\ in \verb!\special! records; 
their prefix is ``src:''.  The \texttt{patchDVI} function reads
each ``src:'' special and if it refers to a file in a ``concordance:'' special,
makes the substitution.  At the end, it rewrites the whole \file{.dvi} file.


\section{Patching \file{.synctex} Files}\label{sec:synctex}

When using \texttt{pdflatex}, the \verb!\Sconcordance! macro expands to a
\verb!\pdfobj! macro containing the concordance, which eventually is
embedded in the \file{.pdf} file.  However, the Synctex scheme of
source references does not write the references to the \file{.pdf} file
directly.  Instead, they are written to a separate file with extension
\file{.synctex}, or a compressed version of that file, with
extension \file{.synctex.gz}.  The \texttt{patchSynctex} function
reads the concordances from either the \file{.pdf} file (when \texttt{pdflatex}
was used) or the \file{.dvi} file, and the source
references from the Synctex file.  It rewrites only
the Synctex file when it makes its changes.

\section{Project Management Function \texttt{SweaveAll}}\label{sec:make}

As mentioned above, there are a number of steps involved in running \patchDVI
with a complex Sweave project:
\begin{enumerate}
\item Run Sweave on each input file.
\item Run \LaTeX\ on the main wrapper file.
\item Run the appropriate \patchDVI function on the output file.
\item Preview or print the result.
\end{enumerate}
Moreover, step 1 needs to be repeated once for each Sweave file, but only
if the content has changed since the last run, while the other steps need only
be done once.

To manage this complication, the \patchDVI package includes a simple
project management function, \texttt{SweaveAll}.  This function runs Sweave
on multiple files and determines the name of the main wrapper file.  It is 
used internally by the functions described in Section \ref{sec:complete}
below, but can also be called directly by the user.

Here is how it works.  \texttt{SweaveAll} takes a vector
of filenames as input, and runs Sweave on each.  After each run, it examines the
global environment for four variables:  \texttt{.PostSweaveHook},
\texttt{.SweaveFiles}, \texttt{.SweaveMake} and \texttt{.TexRoot}.

A code chunk in a \file{.Rnw} file may produce a function (or the name of
a function; \texttt{match.fun} is used to look it up) named \texttt{.PostSweaveHook}.
If present, this should be a function taking a single argument.  
Immediately after running \texttt{Sweave}, 
\texttt{SweaveAll} will call this function, passing the name of the 
\file{.tex} output file as the only argument.  The hook can do any
required postprocessing, for example, it could remove local
pathnames from output strings.

The optional parameter \texttt{PostSweaveHook} to the \texttt{SweaveAll} function
can provide a default hook function.  Hooks specified via \texttt{.PostSweaveHook}
take precedence in any given input file.

\texttt{SweaveAll} will also check for a character vector
named \texttt{.SweaveFiles}.  It should contain the names of  \file{.Rnw} 
files in the project.  If no corresponding \file{.tex} file exists, or the
\file{.Rnw} file is newer, they will be run through Sweave.  They may in
turn name additional \file{.Rnw} files to process; each file is processed
only once, even if it is named several times.

There is an optional parameter named \texttt{make} to the \texttt{SweaveAll} function.
If \texttt{make=1} (the default), things proceed as described above.  If \texttt{make=0},
the \texttt{.SweaveFiles} variable is ignored, and only the explicitly named
files in the call to \texttt{SweaveAll} are processed.  If \texttt{make=2}, then
all files are processed, whether they are newer than their \file{.tex} 
file or not.  The \texttt{.SweaveMake} variable will override the value
of \texttt{make}.  

An \file{.Rnw} file may also set the value of \texttt{.TexRoot} to the name of
a \file{.tex} file.  If it does, then that is the file that should be passed
to \LaTeX\ for processing.  If none is given, then the first file in the call
to \texttt{SweaveAll} will be assumed to be the root file.  (If multiple
different \texttt{.TexRoot} variables are specified by different \file{.Rnw}
files, one of them will be used, but it is hard to predict which:  so don't do
that.)  Whichever file is determined to be the root file is the name returned
by the \texttt{SweaveAll} call.

\texttt{SweaveAll} is called by all of the functions described in subsection
\ref{sec:complete} below to do step 1 of the \patchDVI steps.

The workflow this is designed for is as follows.  Each \file{.Rnw}
chapter (named for example ``chapter.Rnw'') 
in a large project should specify the \texttt{.TexRoot}, e.g. using the
code chunk
\begin{verbatim}
 <<echo=FALSE>>=
 .TexRoot <- "wrapper.tex"
 @
\end{verbatim}
Similarly, the wrapper file (named for example
``wrapper.Rnw'') should be a \file{.Rnw} file that sets
\texttt{.SweaveFiles} to the complete list of files in the project.
Then one can build an initial copy of the entire document by calling
\texttt{SweavePDF} or \texttt{SweaveDVI} 
(or the MikTeX versions) with argument \texttt{"wrapper.Rnw"}.
Later, while one is working on ``chapter.Rnw'', one can call
one of those functions
with argument \texttt{"chapter.Rnw"} 
and the chapter will be processed through
the full sequence, without running Sweave on the other chapters.

More complicated schemes are possible.  For example:
\begin{itemize}
\item Each chapter can have subsections in separate
files; then the chapter would name the subsections, but the main wrapper would only
need to name the chapters if you can assume that only the chapter
being edited was changed.
\item If one wants to ``make'' the full project every time,
then include \texttt{"wrapper.Rnw"} in \texttt{.SweaveFiles} in each chapter.
\end{itemize}

\subsection{The Complete Process}\label{sec:complete}

The \patchDVI package contains five functions designed to run all
four of the steps listed at the start of this section.  The functions
\texttt{SweaveDVI} and \texttt{SweaveMiktex} produce \file{.dvi} output
in the general case and for MikTeX respectively; \texttt{SweavePDF} and
\texttt{SweavePDFMiktex} do the same for direct \file{.pdf} output
from \texttt{pdflatex}.  Finally, \texttt{SweaveDVIPDFM} runs
the two-step conversion using first \texttt{latex} and then \texttt{dvipdfm}.

In each case, the \TeX processing functions are customizable.  

For example, the text editor that I use allows me to call external
functions with arguments depending on the name of the current file and
the line number within it.  I have it call a Windows batch file 
with the line set as argument \verb!%1! and the filename
set as argument \verb!%2!; the batch
file invokes R using the command line
\begin{verbatim}
echo patchDVI::SweaveMiktex('%2', 
    preview='yap -1 -s"%1%2" "\x25s"') 
    | Rterm --slave
\end{verbatim}
(all on one long line).  This passes the current file to \texttt{SweaveMiktex},
and sets the preview command to use the \texttt{yap} options \texttt{-1} to 
update the current view (rather than opening a new window), and to jump to the
line corresponding to the editor line.  The code \verb!"\x25s"! is simply
\verb!"%s"! encoded without an explicit percent sign, which would be 
misinterpreted by the Windows command processor.  When \patchDVI calls
the previewer, the main \file{.dvi} filename will be substituted for
\verb!%s!.


\section{Conclusion}\label{sec:conclusion}

As described in this paper, the \patchDVI package is a convenient way
to work with Sweave in a modern setting, allowing fast switching from
source input to preview.  It also offers some features to make the
management of larger projects easier.  

Other possibilities may exist to make use of the code in this package.  In
order to read and patch \file{.dvi}, \file{.pdf} and \file{.synctex}
files, \patchDVI includes code to work with each of those formats.  Users may
find imaginative uses for this capability, which I've tried to leave 
in general form.  The low-level \file{.dvi} editing is done by C functions
called from R, while the PDF related work is done in pure R code.  

\bibliography{patchDVI}

\newpage

\appendix

\section{Using \patchDVI with TeXShop}
\label{sec:texshop}

TeXShop is a nice \TeX\ editor on MacOS.  Dave Gabrielson of the University of Manitoba helped me to work
out these instructions.  I have updated them in December, 2013 for TeXShop 2.47.

\begin{enumerate}
\item In Preferences -- Typesetting -- Sync Method, choose ``SyncTeX''.
\item Create a file called \verb!Library/TeXShop/Engines/Sweave.engine! 
containing the lines
\begin{verbatim}
#!/bin/tcsh
Rscript -e "patchDVI::SweavePDF(  '$1' )"
\end{verbatim}
in your home directory, and give it executable permissions.  
\item Install the \texttt{patchDVI} package into R.
\item When editing a \texttt{.Rnw} file in TeXShop, choose the Sweave engine from the menu.
\item If you have multiple files in your project, your main file must be a Sweave file
(e.g. \texttt{Main.Rnw}) which lists all Sweave files in a \texttt{.SweaveFiles} variable, 
and you need to add the line
\begin{verbatim}
%!TEX root = Main.Rnw
\end{verbatim}
to each subordinate file.
\item Add the \verb!\SweaveOpts{concordance=TRUE}! line to your document.
\end{enumerate}

The TeXShop previewer supports SyncTeX; you right click in the preview, and choose Sync from the menu
to jump to your source location.

\section{Using \patchDVI with TeXWorks}
\label{sec:texworks}

TeXWorks is an editor for multiple platforms, 
somewhat similar to TeXShop.  These instructions 
have been tested in version 0.4.5, with MikTeX 2.9 on Windows,
and MacTeX on MacOS.  Problems have been reported with
TeXWorks 0.4.4; I do not recommend using that version.

TeXWorks can work with the \texttt{patchDVI}
project management features using a script
to tell it to process the current file through Sweave, but preview
the main file.  See the instructions below for my current best attempt at such
a script.  It can also use the TeXShop approach of specifying
the TEX root file to be a Sweave file.

\begin{enumerate}
\item Add a new SweavePDF command:  In\\

Edit | Preferences | Typesetting \\
\\
click on the ``+'' sign near the bottom.  Set the name of the tool to be SweavePDF.
Set the program to Rscript.

Add two arguments, one per line:
\begin{enumerate}
\item \verb!-e!
\item \verb!patchDVI::SweavePDF('$fullname')! % $
\end{enumerate} 
\item Install the \texttt{patchDVI} package into R.
\item Tell TeXWorks to open Sweave files by editing the file pattern configuration file \texttt{texworks-config.txt}.
This file is in the \texttt{configuration} folder of the TeXWorks home directory.  For example, I have this
line in my file:
\begin{verbatim}
file-open-filter:	Sweave and TeX documents (*.Rnw *.tex)
\end{verbatim}
\item When editing a \texttt{.Rnw} file in TeXWorks, choose the SweavePDF engine from the menu.
\item Add the \verb!\SweaveOpts{concordance=TRUE}! line to your document.
\item If you are using the project management features of \texttt{patchDVI} and are
editing a subordinate file, TeXWorks will not open or update the PDF preview after it processes changes.
There are four workarounds for this.

The simplest is to manually open the \texttt{.pdf} file the first time.  After that it will be updated
automatically.  Unfortunately, if you happen to be editing the main file, the \texttt{.pdf} will be opened
automatically, and then updates won't happen if you later edit a subordinate file.

The next simplest is the TeXShop approach:  include a line 
\begin{verbatim}
%!TEX root = Main.Rnw
\end{verbatim}
near the top of the file, and make sure that \texttt{Main.Rnw} refers
to all subordinate Sweave files.

You can force updates without the TEX root specification
using the following hook script (written by Stefan L\"{o}ffler).
\begin{verbatim}
// TeXworksScript
// Title: Refresh PDF
// Description: Refreshes PDFs after typesetting finishes
// Author: Stefan Löffler
// Version: 0.1
// Date: 2013-11-20
// Script-Type: hook
// Hook: AfterTypeset

windows = TW.app.getOpenWindows()

for (i = 0; i < windows.length; i++) {
    win = windows[i]
    if (win.objectName == "PDFDocument") {
        win.reload()
    }
}
\end{verbatim}
Put this script in a file \texttt{refreshpdf.js} in your TeXWorks script directory (available through the menu
using Scripts | Scripting TeXWorks | Show Scripts Folder).  After that, PDF previews will be automatically
updated after every Typeset operation.

I have written another script (included in the scripts directory of \texttt{patchDVI}
as \texttt{sweavePreview.js});
it attempts to determine the PDF filename from the console output, and reloads that file.
I have tested it on my own systems but not elsewhere, so I am not sure that it will work on other
systems.  With this script (shown below) TeXWorks should open
the preview without using the tricks above.  The TeXWorks 
previewer will jump back to the source if you right click and choose 
Jump to Source.


\begin{verbatim}
<<results=tex, echo=FALSE>>=
cat(readLines(system.file("scripts/sweavePreview.js", 
                          package="patchDVI")), sep="\n")
@
\end{verbatim}
\end{enumerate}



\section{Using \patchDVI with WinEdt}
\label{sec:winedt}

WinEdt is a Windows editor with \TeX\ support.  The configuration options have changed a number of times; I do
not know how to implement these instructions in the latest version.  These instructions apply to version 5.5,
and assume you are using it with MikTeX.

\begin{enumerate}
\item In Options -- Execution Modes choose Texify, and click on Browse for Executable.  Find the \texttt{Rscript} executable
in your R installation, directory \file{bin/i386} or \file{bin/x64}, and choose it.  In the Switches line, put 
\begin{verbatim}
-e
\end{verbatim}
and in the Parameters line, put
\begin{verbatim}
"patchDVI::SweaveMiktex('%n%t', '%N.tex')"
\end{verbatim}
The quotes are necessary!
\item Do the same for the PDF Texify command, replacing \texttt{SweaveMiktex} with \texttt{SweavePDFMiktex}.

\item In Options -- Execution modes, make sure Start Viewer and Forward Search are selected for LaTeX and PDF LaTeX.
\end{enumerate}

When you preview a file in \texttt{yap}, double clicking should jump back to the editor.  If it doesn't (or it opens the wrong editor),
while you're in \texttt{yap} choose View -- Options -- Inverse DVI search.  
You should see ``WinEdt (auto-detected)" as an option; if so, select it.  If not, create a new entry for WinEdt, and for the command line, put in
\begin{verbatim}
"path\to\winedt.exe" "[Open(|%f|);SelPar(%l,8)]"
\end{verbatim}
after editing the path as necessary.



\end{document}




